"""user id -> uuid

Revision ID: 8f1d32b074dd
Revises: dc8fedac8410
Create Date: 2025-04-30 22:09:02.361886

"""
import uuid
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '8f1d32b074dd'
down_revision: Union[str, None] = 'dc8fedac8410'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # Create UUID extension
    op.execute('CREATE EXTENSION IF NOT EXISTS "uuid-ossp"')

    # Drop old OTP table and create new one
    op.drop_table('o_t_p')
    
    op.create_table(
        'otp',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('code', sa.String(length=6), nullable=False),
        sa.Column('expires_at', sa.DateTime(), nullable=False),
        sa.Column('used', sa.Boolean(), nullable=False, server_default='false'),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_otp_id'), 'otp', ['id'], unique=False)

    # Add temporary UUID column
    op.add_column('user', 
        sa.Column('id_tmp', sa.UUID(as_uuid=True), server_default=sa.text('uuid_generate_v4()'), nullable=False)
    )

    # Copy data from old ID to new UUID
    op.execute("""
        UPDATE "user" 
        SET id_tmp = uuid_generate_v4()
        WHERE id_tmp IS NULL
    """)

    # Drop all foreign key constraints that reference user.id
    op.drop_constraint('ad_user_id_fkey', 'ad', type_='foreignkey')
    
    # Add temporary UUID column to ad table
    op.add_column('ad', 
        sa.Column('user_id_tmp', sa.UUID(as_uuid=True), nullable=True)
    )

    # Copy user IDs to the new UUID column
    op.execute("""
        UPDATE ad a
        SET user_id_tmp = u.id_tmp
        FROM "user" u
        WHERE a.user_id = u.id
    """)

    # Drop old ID columns and rename temporary columns
    op.drop_column('ad', 'user_id')
    op.alter_column('ad', 'user_id_tmp', new_column_name='user_id')
    
    op.drop_column('user', 'id')
    op.alter_column('user', 'id_tmp', new_column_name='id')
    
    # Create new indexes and constraints
    op.create_index(op.f('ix_user_id'), 'user', ['id'], unique=True)
    
    # Add back foreign key constraints with UUID type
    op.create_foreign_key(
        'ad_user_id_fkey',
        'ad', 'user',
        ['user_id'], ['id']
    )
    
    op.add_column('otp', 
        sa.Column('user_id', sa.UUID(as_uuid=True), nullable=True)
    )
    op.create_foreign_key(
        'otp_user_id_fkey',
        'otp', 'user',
        ['user_id'], ['id']
    )


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_index('ix_user_id', 'user', ['id'], unique=False)
    op.alter_column('user', 'id',
               existing_type=sa.UUID(),
               type_=sa.INTEGER(),
               existing_nullable=False)
    op.create_table('o_t_p',
    sa.Column('code', sa.VARCHAR(length=6), autoincrement=False, nullable=False),
    sa.Column('expires_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('used', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name='o_t_p_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='o_t_p_pkey')
    )
    op.create_index('ix_o_t_p_id', 'o_t_p', ['id'], unique=False)
    op.drop_index(op.f('ix_otp_id'), table_name='otp')
    op.drop_table('otp')
    # ### end Alembic commands ###
